<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kmeans | Data Quest]]></title>
  <link href="http://vivekmishra1991.github.io/blog/categories/kmeans/atom.xml" rel="self"/>
  <link href="http://vivekmishra1991.github.io/"/>
  <updated>2015-10-13T22:03:04+01:00</updated>
  <id>http://vivekmishra1991.github.io/</id>
  <author>
    <name><![CDATA[Vivek Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FrugalKmeans: Restaurants' Home Delivery Route Optimizer]]></title>
    <link href="http://vivekmishra1991.github.io/blog/2015/09/19/frugalkmeans-restaurants-home-delivery-route-optimizer/"/>
    <updated>2015-09-19T11:41:55+01:00</updated>
    <id>http://vivekmishra1991.github.io/blog/2015/09/19/frugalkmeans-restaurants-home-delivery-route-optimizer</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>What if I could reduce the home delivery cost of restaurants around my city.Maybe optimize routes , cluster restaurants into similar regions and assign delivery men to each cluster. Would this help ? Lets find out.</p>

<p>FrugalKmeans tries to analyze this over my favorite city <em>Lucknow</em>,India which is known for its exquisite <em>Awadhi</em> Cuisine .</p>

<p>After-all <strong>FRUGALITY IS OPTIMAL</strong>.</p>

<h2>DATA</h2>

<p>I required <strong>names</strong> and <strong>addresses</strong> of all the restaurants in Lucknow. My only option was scraping data from my favorite food portal. <a href="http://scrapy.org/">Scrapy</a> an open source scraping tools came very handy in getting the names of all the restaurants.There were whooping <em>(for non-metro standard) 962</em> of them in Lucknow. <a href="https://github.com/vivekmishra1991/FrugalKMeans/blob/master/scrap/spiders/frugalMeans.py">Github-Scrap </a> has the required scripts &amp; instruction for doing this.</p>

<p>Sample scraped data:(<strong>TABLE 1</strong>)</p>

<table>
<thead>
<tr>
<th> <strong>address</strong>                                      </th>
<th> <strong>name</strong>                         </th>
</tr>
</thead>
<tbody>
<tr>
<td>                                                  </td>
<td>                              </td>
</tr>
<tr>
<td> _____________________________________________________</td>
<td>________________________</td>
</tr>
<tr>
<td> 41/47, Opposite Kendriya Vidyalaya, Vivek Khand  </td>
<td>       180 Chocoxpress              </td>
</tr>
<tr>
<td> 3rd Floor, Hera Plaza, Sector 8, Vikas Nagar, </td>
<td>          101 Temperature Lounge       </td>
</tr>
<tr>
<td> Capital Building, GPO, Hazratganj, Lucknow       </td>
<td>       A 1 Dildar Sindhi Restaurant </td>
</tr>
<tr>
<td> 4th Floor, Food Court, Phoenix United Mall, Alambagh </td>
<td>   180 Chocoxpress              </td>
</tr>
<tr>
<td> 5th Floor, Phoenix United Mall, Alambagh, Lucknow </td>
<td>       5 C R Lounge                 </td>
</tr>
</tbody>
</table>


<h3>Coordinates</h3>

<p>After obtaining the names and addresses of all the restraunt ,next step was to get their coordinates.<a href="https://developers.google.com/maps/documentation/geocoding/intro">Google-Geo-coding API</a> does the trick.Just get a <code>API KEY</code> as instructed in aforementioned link and using <a href="https://github.com/vivekmishra1991/FrugalKMeans/blob/master/frugalKmeans/co_ordinates/coordinate.py">coordinate.py</a> you will get a nice list of restaurants with their coordinates.</p>

<p>Something like this:(<strong>Table 2</strong>)</p>

<table>
<thead>
<tr>
<th> <strong>name</strong>                                    </th>
<th> <strong>address</strong>                                                                                                        </th>
<th> <strong>Lat.</strong>        </th>
<th> <strong>Long.</strong>       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> __________________________________________</td>
<td>___________________________________________</td>
<td>______________________</td>
<td>___________</td>
</tr>
<tr>
<td>                                                                                                                </td>
<td>            </td>
<td>            </td>
<td></td>
</tr>
<tr>
<td> Hera Plaza Sector 8 Vikas Nagar lucknow </td>
<td> Sector 8, Vikas Nagar, Lucknow, Uttar Pradesh 226022, India                                                    </td>
<td> 26.8906639  </td>
<td> 80.9670749 </td>
</tr>
<tr>
<td> Kamla Nehru Marg lucknow                </td>
<td> Kamla Nehru Marg, Lucknow, Uttar Pradesh 226003, India                                                         </td>
<td> 26.8658443 </td>
<td> 80.9104684 </td>
</tr>
<tr>
<td> GPO Hazratganj Lucknow lucknow          </td>
<td> Sardar Patel Park, Vidhan Sabha Marg, Raj Bhavan Colony, The Mall Avenue, Lucknow, Uttar Pradesh 226001, India </td>
<td> 26.8453894 </td>
<td> 80.9456421 </td>
</tr>
</tbody>
</table>


<h2>DATA PREPROCESSING</h2>

<p>Now we have all the data that we require to analyze our problem.But still a little trimming is required to make the available data suitable to be fed into our algorithm.</p>

<p>First step would be to using <a href="http://pandas.pydata.org/">Pandas</a> library to weed out the addresses &amp; names and also fill up the NA data point if any. After data processing stage we are left with coordinates only.</p>

<p>Something like:(<strong>Table 3</strong>)</p>

<table>
<thead>
<tr>
<th> <strong>Latitude</strong>   </th>
<th> <strong>Longitude</strong>  </th>
</tr>
</thead>
<tbody>
<tr>
<td>___________________</td>
<td>___________</td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
</tr>
<tr>
<td> 26.8906639 </td>
<td> 80.9670749 </td>
</tr>
<tr>
<td> 26.8658443 </td>
<td> 80.9104684 </td>
</tr>
</tbody>
</table>


<h2>Clustering</h2>

<p>Next step in this quest to find a frugal method for home delivery comes with the clustering of restaurants into similar geographical regions.And what is a better method then K-Means to achieve that.But there is a problem with K-Means for this dataset and it fails giving NA values as the cluster centroids, if <code>K&gt;4</code>.</p>

<p>This is a serious issue pretaining to K-Means therefore I somehow settled for <strong>&lsquo;Bi-KMeans&rsquo;</strong> or <strong>Bisecting KMeans</strong> clustering algorithm which is a little different form the traditional K-means algorithm in following ways.</p>

<p>k-means sometimes gives poor results if it is caught in a local minimum.Therfore
another algorithms called bisecting k-means is developed. It starts with choosing one random centroid and distance from all the points is calculated as sum of square error or <strong>SSE</strong>. While number of centroids are less then <strong>K</strong>(user defined number of clusters) algorithms recursively splits the above cluster into many clusters based on the least SSE error for the split.</p>

<p>After aplying Bisecting K-means clustering algorithm(<a href="https://github.com/vivekmishra1991/FrugalKMeans/blob/master/frugalKmeans/biKMeans.py">Github-BiKmeans.py</a>) to the data in Table3 we get another list of data points with two features &ldquo;<strong>the cluster they belong to</strong>&rdquo; and &ldquo;<strong>distance from corresponding centroid</strong>&rdquo; . A sample data from after transformation :</p>

<table>
<thead>
<tr>
<th> Cluster </th>
<th>  SSE or distance </th>
</tr>
</thead>
<tbody>
<tr>
<td>_________</td>
<td>__________________ </td>
</tr>
<tr>
<td> 8       </td>
<td> 0.5886538506     </td>
</tr>
<tr>
<td> 3       </td>
<td> 0.0241409154     </td>
</tr>
<tr>
<td> 3       </td>
<td> 0.0107502713     </td>
</tr>
<tr>
<td> 3       </td>
<td> 0.0107502713     </td>
</tr>
<tr>
<td> 7       </td>
<td> 0.2401804062     </td>
</tr>
<tr>
<td> 0       </td>
<td> 0.1848409829     </td>
</tr>
</tbody>
</table>


<h2>Results and Visualizations</h2>

<p><a href="Generate%20custom%20maps%20using%20your%20coordinates%20in%20Excel!">Hamstermap</a> is a beautiful online tool for plotting map coordinates but since it accepts a specific format we need to do a little Data munging for that. A python script(<a href="https://github.com/vivekmishra1991/FrugalKMeans/blob/master/frugalKmeans/frugalKmeans.py">frugalKmeans.py</a>) I have written does the same very efficiently .After transforming the data with above script we are left with the following list of <a href="https://github.com/vivekmishra1991/FrugalKMeans/tree/master/frugalKmeans/hamstermap">data points</a> :</p>

<table>
<thead>
<tr>
<th> latitude   </th>
<th> longitude  </th>
<th> marker  </th>
<th> color  </th>
</tr>
</thead>
<tbody>
<tr>
<td>_____________</td>
<td>____________</td>
<td>_________</td>
<td>________</td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8906639 </td>
<td> 80.9670749 </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8658443 </td>
<td> 80.9104684 </td>
<td> circle1 </td>
<td> orange </td>
</tr>
<tr>
<td> 26.8453894 </td>
<td> 80.9456421 </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8466937 </td>
<td> 80.946166  </td>
<td> circle1 </td>
<td> blue   </td>
</tr>
<tr>
<td> 26.8532449 </td>
<td> 80.9965217 </td>
<td> circle1 </td>
<td> black  </td>
</tr>
</tbody>
</table>


<p>Exporting this to Hamstermap and plotting the required coordinates gives the centroids(where delivery boys should be stationed) and respective restaurants they would service from.</p>

<p>After some exploratory data-analysis we come up with following map.<img src="/./assets/result.jpg" alt="Optimal Points to cover entire Lucknow delivery space" /></p>
]]></content>
  </entry>
  
</feed>
